
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------  
// <auto-generated>  
//     This code was generated by a tool.  
//     Changes to this file may cause incorrect behavior and will be lost if  
//     the code is regenerated.  
// </auto-generated>  
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;

<#
    const string ResourceFileName = "Resources.resx";
#>

namespace <#=System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint").ToString()#>;

public class Language : INotifyPropertyChanged
{
    public Language()
    {
        _propertyNames = GetType().GetProperties().Select(p => p.Name);
    }

    public CultureInfo Culture
    {
        get => Resources.Culture;
        set
        {
            Resources.Culture = value;
            foreach (var name in _propertyNames)
            {
                OnPropertyChanged(name);
            }
        }
    }

    private readonly IEnumerable<string> _propertyNames;

    public event PropertyChangedEventHandler? PropertyChanged;

    private void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    
    public static string? FindResource(string key)
    {
        return Resources.ResourceManager.GetString(key, Resources.Culture);
    }

    public static Language Instance
    {
        get;
    } = new Language();
	<#
	var resourceKeys = XElement.Load(this.Host.ResolvePath(ResourceFileName))
	    .Elements("data")
	    .Select(item => item.Attribute("name")?.Value)
	    .Where(item => item != null);
	
	var resourceDesignerName = Path.GetFileNameWithoutExtension(ResourceFileName);
	
	foreach (string resourceKey in resourceKeys)
	{
	#>
	    public string <#= resourceKey #> => <#= resourceDesignerName #>.<#= resourceKey #>;
	<#
	}
#>
}


